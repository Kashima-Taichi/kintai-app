server {
    # 使用するipアドレスやポート番号の指定
    listen 80;
    # ドキュメントルートの指定
    root /work/public;
    # indexファイルの指定
    index index.php;
    # レスポンスヘッダーのContent-typeの設定
    charset utf-8;

    # URIが / に一致するもの → 全部
    location / {
        # ドキュメントルートの設定
        root /work/public;
        # 指定のファイルが存在するかを左から探す。見つかったものから順に実行
        # $args : GETパラメーター
        # $is_args : リクストパラメーターがある場合
        # 参考URL : https://qiita.com/syou007/items/3e2d410bbe65a364b603#try_files
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

# server{ } : ディレクティブ。ディレクティブ内部の記述は、そのディレクティブ内でのみ有効。
# ドキュメントルート : サーバー上にユーザーが閲覧するコンテンツを置く場所
# インデックスファイル : ファイル名が省略されてアクセスされた時に表示するファイル
# location{ } 任意のURI : 任意のURIに対して特定の設定をする
#
#
# 【fastcgi_split_path_info】
# このディレクティブは、2つのキャプチャされたグループを持つ正規表現を定義します。 
# 最初にキャプチャされたグループは、 `+ $ fastcgi_script_name `変数の値として使用されます。 
# 2番目にキャプチャされたグループは、 ` $ fastcgi_path_info +`変数の値として使用されます。 
# これらの両方は、多くの場合、リクエストを正しく解析するために使用され、
# プロセッサはリクエストのどの部分が実行するファイルであり、どの部分がスクリプトに渡す追加情報であるかを認識します。
#
# 【fastcgi_pass】
# 現在のコンテキストのリクエストをバックエンドに渡す実際のディレクティブ。 これは、FastCGIプロセッサに到達できる場所
#
# 【fastcgi_index】
#  $ fastcgi_script_name `値に追加するインデックスファイルを定義します。 
# これは、 ` SCRIPT_FILENAME `パラメーターが ` $ document_root $ fastcgi_script_name +`に設定され、
# ロケーションブロックがファイルの後に情報を含むリクエストを受け入れるように設定されている場合に便利です
#
# 【初心者には難しいので下記などを参照】
# https://www.codeflow.site/ja/article/understanding-and-implementing-fastcgi-proxying-in-nginx
#